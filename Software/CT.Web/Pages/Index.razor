@page "/"
@inherits IndexModel
@using System;
@using System.Diagnostics;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading;
@using CT.BusinessLogic.Interfaces;
@using CT.BusinessLogic.Entities;

@inject ISerialService SerialService
@inject ICanMessageComposer CanMessageComposer
@inject IHandler Handler

<h1>Car info</h1>
<div class="top-data">
    @if (handbrake == 1)
    {
        <div class="icons-container">
            <img class="icon-top handbrake-img" src="/images/handbrake.png" />
        </div>
    }
    <div class="icons-container">
        <img class="icon-top external-temperature" src="/images/thermometer.png" />
        <span>21</span>
    </div>
    <div class="icons-container">
        <img class="icon-top" src="/images/oil.png" />
        <span>85</span>
    </div>
    <div class="icons-container">
        <img class="icon-top" src="/images/road.png" />
        <span>653 km</span>
    </div>
    <div class="icons-container">
        <img class="icon-top" src="/images/gas.png" />
        <span>42 l</span>
    </div>
</div>
<div class="car">
    <img class="alert alert-secondary car-img" src="/images/car.PNG" alt="Image">
    <img class="door left_front @styleDoorDriver" src="/images/driverClosedDoor.PNG" alt="Image">
    <img class="door left_back @styleDoorBackLeft" src="/images/leftClosedDoor.png" alt="Image">
    <img class="door right_back @styleDoorBackRight" src="/images/rightClosedDoor.png" alt="Image">
    <img class="door right_front @styleDoorPassenger" src="/images/passangerClosedDoor.png" alt="Image">

</div>
<div>
    @foreach (KeyValuePair<CanProperties, string> entry in DataDictionary.aData)
    {
        <p>@entry.Key = @entry.Value</p>
    }
</div>



@code
{
    Timer _updateTimer;
    public string Can_1 { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(3000);
        Can_1 = await SerialService.GetSerialValue();
        _updateTimer = new Timer(state => { InvokeAsync(GetValue); }, null, 0, 100);
        CanMessage can_message = CanMessageComposer.Compose(Can_1);
        var result = Handler.Handle(can_message);
    }


    public async Task GetValue()
    {
        Can_1 = await SerialService.GetSerialValue();
        await InvokeAsync(() => StateHasChanged());
        CanMessage can_message = CanMessageComposer.Compose(Can_1);
        var result = Handler.Handle(can_message);
        styleDoorDriver = DataDictionary.aData[CanProperties.DoorFrontLeft] + "_left_animation";
        styleDoorBackLeft = DataDictionary.aData[CanProperties.DoorBackLeft] + "_left_animation";
        styleDoorBackRight = DataDictionary.aData[CanProperties.DoorBackRight] + "_right_animation";
        styleDoorPassenger = DataDictionary.aData[CanProperties.DoorFrontRight] + "_right_animation";
    }
}