@page "/"
@inherits IndexModel
@using System;
@using System.Diagnostics;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading;
@using CT.BusinessLogic.Interfaces;
@using CT.BusinessLogic.Entities;
@using System.Text.RegularExpressions;

@inject ISerialService SerialService
@inject ICanMessageComposer CanMessageComposer
@inject IHandler Handler

<h1>Car info</h1>
<h2 style="color:darkred;">@message</h2>

<div class="top-data">
    @if (handbrake == 1)
    {
        <div class="icons-container">
            <img class="icon-top handbrake-img" src="/images/handbrake.png" />
        </div>
    }
    <div class="icons-container">
        <img class="icon-top external-temperature" src="/images/thermometer.png" />
        <span>@DataDictionary.aData[CanProperties.OutdoorTemperature] &#8451</span>
    </div>
    <div class="icons-container">
        <img class="icon-top" src="/images/oil.png" />
        <span>85</span>
    </div>
    <div class="icons-container">
        <img class="icon-top" src="/images/road.png" />
        <span>653 km</span>
    </div>
    <div class="icons-container">
        <img class="icon-top" src="/images/gas.png" />
        <span>42 l</span>
    </div>
</div>
<div class="car">
    <img class="alert alert-secondary car-img" src="/images/car.PNG" alt="Image">
    <img class="door left_front @styleDoorDriver" src="/images/driverClosedDoor.PNG" alt="Image">
    <img class="door left_back @styleDoorBackLeft" src="/images/leftClosedDoor.png" alt="Image">
    <img class="door right_back @styleDoorBackRight" src="/images/rightClosedDoor.png" alt="Image">
    <img class="door right_front @styleDoorPassenger" src="/images/passangerClosedDoor.png" alt="Image">

</div>
<div class="top-data">
    <div class="icons-container">
        <img class="icon-top handbrake-img" src="/images/TempInCar.png" />
        <span>@DataDictionary.aData[CanProperties.IndoorTemperature] &#8451</span>
    </div>
 </div>   
    <div>
        @foreach (KeyValuePair<CanProperties, string> entry in DataDictionary.aData)
        {
            <p>@entry.Key = @entry.Value</p>
        }
    </div>



    @code
{
        string message;
        Timer _updateTimer;
        public string canCommand { get; set; } = "";

        protected override async Task OnInitializedAsync()
        {
            var r = new Regex(@".{3}\s.{2}\s.{2}\s.{2}\s.{2}\s.{2}\s.{2}\s.{2}\s.{2}\s*");

            try
            {
                await Task.Delay(300);
                canCommand = await SerialService.GetSerialValue();

                if (r.IsMatch(canCommand))
                {
                    _updateTimer = new Timer(state => { InvokeAsync(GetValue); }, null, 0, 100);
                    CanMessage can_message = CanMessageComposer.Compose(canCommand);
                    var result = Handler.Handle(can_message);
                }
            }
            catch (System.ArgumentNullException)
            {
                message = "Something wrong with selected COM port";
            }
            catch (System.NullReferenceException)
            {
                message = "Something wrong with selected COM port";
            }
        }

        public async Task GetValue()
        {
            canCommand = await SerialService.GetSerialValue();
            await InvokeAsync(() => StateHasChanged());
            CanMessage can_message = CanMessageComposer.Compose(canCommand);
            var result = Handler.Handle(can_message);
            styleDoorDriver = DataDictionary.aData[CanProperties.DoorFrontLeft] + "_left_animation";
            styleDoorBackLeft = DataDictionary.aData[CanProperties.DoorBackLeft] + "_left_animation";
            styleDoorBackRight = DataDictionary.aData[CanProperties.DoorBackRight] + "_right_animation";
            styleDoorPassenger = DataDictionary.aData[CanProperties.DoorFrontRight] + "_right_animation";
        }

    }
