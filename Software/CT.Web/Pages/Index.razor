@page "/"
@inherits IndexModel
@using System;
@using System.Diagnostics;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading;
@using CT.BusinessLogic.Interfaces;
@using CT.BusinessLogic.Entities;
@using System.Text.RegularExpressions;

@inject ISerialService SerialService
@inject ICanMessageComposer CanMessageComposer
@inject IHandler Handler

<h1>Car info</h1>
<h2 style="color:darkred;">@message</h2>

<div class="top-data">
    @if (handbrake == 1)
    {
        <div class="icons-container">
            <img class="icon-top handbrake-img" src="/images/handbrake.png" />
        </div>
    }
    <div class="icons-container">
        <img class="icon-top external-temperature" src="/images/thermometer.png" />
        <span>21</span>
    </div>
    <div class="icons-container">
        <img class="icon-top" src="/images/oil.png" />
        <span>85</span>
    </div>
    <div class="icons-container">
        <img class="icon-top" src="/images/road.png" />
        <span>653 km</span>
    </div>
    <div class="icons-container">
        <img class="icon-top" src="/images/gas.png" />
        <span>42 l</span>
    </div>
</div>
<div class="car">
    <img class="alert alert-secondary car-img" src="/images/car.PNG" alt="Image">
    @if (DataDictionary.aData[DataEnum.CAN_properties.DoorFrontLeft] == "Open")
    {
        DriverOpened[0] = 1;
        <img class="door left_front open_left_animation" src="/images/driverClosedDoor.PNG" alt="Image">
    }
    else if (DriverOpened[0] == 1 && DataDictionary.aData[DataEnum.CAN_properties.DoorFrontLeft] == "Close")
    {
        DriverOpened[0] = 0;
        <img class="door left_front close_left_animation" src="/images/driverClosedDoor.PNG" alt="Image">
    }
    else
    {
        <img class="door left_front" src="/images/driverClosedDoor.PNG" alt="Image">
    }

    @if (DataDictionary.aData[DataEnum.CAN_properties.DoorBackLeft] == "Open")
    {
        DriverOpened[1] = 1;
        <img class="door left_back open_left_animation" src="/images/leftClosedDoor.png" alt="Image">
    }
    else if (DriverOpened[1] == 1 && DataDictionary.aData[DataEnum.CAN_properties.DoorBackLeft] == "Close")
    {
        DriverOpened[1] = 0;
        <img class="door left_back close_left_animation" src="/images/leftClosedDoor.png" alt="Image">
    }
    else
    {
        <img class="door left_back" src="/images/leftClosedDoor.png" alt="Image">
    }

    @if (DataDictionary.aData[DataEnum.CAN_properties.DoorBackRight] == "Open")
    {
        DriverOpened[2] = 1;
        <img class="door right_back open_right_animation" src="/images/rightClosedDoor.png" alt="Image">
    }
    else if (DriverOpened[2] == 1 && DataDictionary.aData[DataEnum.CAN_properties.DoorBackRight] == "Close")
    {
        DriverOpened[2] = 0;
        <img class="door right_back close_right_animation" src="/images/rightClosedDoor.png" alt="Image">
    }
    else
    {
        <img class="door right_back" src="/images/rightClosedDoor.png" alt="Image">
    }

    @if (DataDictionary.aData[DataEnum.CAN_properties.DoorFrontRight] == "Open")
    {
        DriverOpened[3] = 1;
        <img class="door right_front open_right_animation" src="/images/passangerClosedDoor.png" alt="Image">
    }
    else if (DriverOpened[3] == 1 && DataDictionary.aData[DataEnum.CAN_properties.DoorFrontRight] == "Open")
    {
        DriverOpened[3] = 0;
        <img class="door right_front close_right_animation" src="/images/passangerClosedDoor.png" alt="Image">
    }
    else
    {
        <img class="door right_front" src="/images/passangerClosedDoor.png" alt="Image">
    }
</div>
<div>
    @foreach (KeyValuePair<DataEnum.CAN_properties, string> entry in DataDictionary.aData)
    {
        <p>@entry.Key = @entry.Value</p>
    }
</div>



@code
{
    string message;
    Timer _updateTimer;
    public string canCommand { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var r = new Regex(@".{3}\s.{2}\s.{2}\s.{2}\s.{2}\s.{2}\s.{2}\s.{2}\s.{2}\s*");

        try
        {
            await Task.Delay(300);
            canCommand = await SerialService.GetSerialValue();

            if (r.IsMatch(canCommand))
            {
                _updateTimer = new Timer(state => { InvokeAsync(GetValue); }, null, 0, 100);
                CanMessage can_message = CanMessageComposer.Compose(canCommand);
                var result = Handler.Handle(can_message);
            }
        }
        catch (System.ArgumentNullException)
        {
            message = "Something wrong with selected COM port";
        }
        catch (System.NullReferenceException)
        {
            message = "Something wrong with selected COM port";
        }
    }

    public async Task GetValue()
    {
        canCommand = await SerialService.GetSerialValue();
        await InvokeAsync(() => StateHasChanged());
        CanMessage can_message = CanMessageComposer.Compose(canCommand);
        var result = Handler.Handle(can_message);
    }

}