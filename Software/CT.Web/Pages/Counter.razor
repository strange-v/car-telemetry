@page "/counter"

@using System;
@using System.Diagnostics;
@using System.Collections.Generic;
@using System.Linq;
@using CT.BusinessLogic.Interfaces;
@using CT.BusinessLogic.Entities;

@inject ICanMessageComposer CanMessageComposer
@inject IHandler Handler

<h1>@message</h1>
<h1>@showByteInString</h1>

<h3>@driverMassage</h3>
<h3>@passangerMassage</h3>
<h3>@leftBackMassage</h3>
<h3>@rightBackMassage</h3>


@foreach(var door in @door_index)
{
    <p>@door</p>
}




<button class="btn btn-primary" @onclick="Test">Test</button>

@code{
    public static int[] AllIndexesOf(string str, string substr, bool ignoreCase = false)
    {
        if (string.IsNullOrWhiteSpace(str) ||
            string.IsNullOrWhiteSpace(substr))
        {
            throw new ArgumentException("String or substring is not specified.");
        }

        var indexes = new List<int>();
        int index = 0;

        while ((index = str.IndexOf(substr, index, ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal)) != -1)
        {
            indexes.Add(index++);
        }

        return indexes.ToArray();
    }

    public string Can_1 = "77E 05 62 22 0D 00 65 AA AA\n";
    public string message = "No answer!";
    public string driverMassage;
    public string passangerMassage;
    public string leftBackMassage;
    public string rightBackMassage;
    public string showByteInString;

    public int[] door_index { get; set; } = { 0, 0, 0, 0 };



    public enum CAN_properties
    {
        DoorFrontRight,
        DoorFrontLeft,
        DoorBackRight,
        DoorBackLeft,
        OutdoorTemperature,
        IndoorTemperature
    }

    public Dictionary<CAN_properties, string> aData = new Dictionary<CAN_properties, string>() {
            { CAN_properties.DoorBackLeft, "Close"},
            { CAN_properties.DoorBackRight, "Close"},
            { CAN_properties.DoorFrontLeft, "Close"},
            { CAN_properties.DoorFrontRight, "Close"},
            { CAN_properties.OutdoorTemperature, "0.0"},
            { CAN_properties.IndoorTemperature, "0.0"},

    };




    public void Test()
    {

        
        CanMessage can_message = CanMessageComposer.Compose(Can_1);
        if (can_message.Id.ToString("X") == "77E" && can_message.Byte3.ToString("X") == "D")
        {
            showByteInString = Convert.ToString(can_message.Byte4, 2).PadLeft(8, '0');
            //01010101
            door_index = AllIndexesOf(showByteInString, "1");


            if (Array.IndexOf(door_index, 7) == -1)
            {
                driverMassage = "Driver door is open!";
                //doors[0] = 1;
            }
            else
            {
                driverMassage = "Driver door is closed!";
                //doors[0] = 0;
            };
            if (Array.IndexOf(door_index, 5) == -1)
            {
                passangerMassage = "Passanger door is open!";
                //doors[3] = 1;
            }
            else
            {
                passangerMassage = "Passanger door is closed!";
                //doors[3] = 0;
            };
            if (Array.IndexOf(door_index, 3) == -1)
            {
                leftBackMassage = "Left Back door is open!";
                //doors[1] = 1;
            }
            else { leftBackMassage = "Left Back door is closed!";
                //doors[1] = 0;
            };

            if (Array.IndexOf(door_index, 1) == -1)
            {
                rightBackMassage = "Right Back door is open!";
                //doors[2] = 1;
            }
            else {rightBackMassage = "Right Back door is closed!";
                //doors[2] = 0;
            };

            if (can_message.Byte4.ToString("X") == "55")
            {
                message = "All doors are Closed!";
            }else if(can_message.Byte4.ToString("X") == "0")
            {
                message = "All doors are open!";
            }

        }


        var result = Handler.Handle(can_message);
        
    }



}
