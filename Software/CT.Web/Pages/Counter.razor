@page "/counter"

@using System;
@using System.Diagnostics;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading;
@using CT.BusinessLogic.Interfaces;
@using CT.BusinessLogic.Entities;

@inject ISerialService SerialService
@inject ICanMessageComposer CanMessageComposer
@inject IHandler Handler

<h1>Data</h1>


@foreach (KeyValuePair<Data.CAN_properties, string> entry in Data.aData)
{
    <p>@entry.Key = @entry.Value</p>
    // do something with entry.Value or entry.Key
}

<button class="btn btn-primary" @onclick="Test">Test</button>
<button class="btn btn-primary" @onclick="Test1">Test1</button>
<button class="btn btn-primary" @onclick="Test2">Test2</button>
<button class="btn btn-primary" @onclick="InTemp">InTemp</button>

@code{
    private int Count { get; set; } = 100;
    Timer _updateTimer;
    public string ScaleValue { get; set; } = "0.000";
    public string Can_1 { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        Can_1 = await SerialService.GetSerialValue();
        _updateTimer = new Timer(state => { InvokeAsync(GetValue); }, null, 0, 100);
        CanMessage can_message = CanMessageComposer.Compose(Can_1);
        var result = Handler.Handle(can_message);
    }


    public async Task GetValue()
    {
        Can_1 = await SerialService.GetSerialValue();
        await InvokeAsync(() => StateHasChanged());
        CanMessage can_message = CanMessageComposer.Compose(Can_1);
        var result = Handler.Handle(can_message);
    }

    public void Dispose()
    {
        _updateTimer.Dispose();
    }

    public void Test()
    {
        Can_1 = "77E 05 62 22 0D 00 65 AA AA\n";
        CanMessage can_message = CanMessageComposer.Compose(Can_1);
        var result = Handler.Handle(can_message);
    }
    public void Test1()
    {
        Can_1 = "77E 05 62 22 0D 55 65 AA AA\n";
        CanMessage can_message = CanMessageComposer.Compose(Can_1);
        var result = Handler.Handle(can_message);
    }
    public void Test2()
    {
        Can_1 = "77E 05 62 22 0D 44 65 AA AA\n";
        CanMessage can_message = CanMessageComposer.Compose(Can_1);
        var result = Handler.Handle(can_message);
    }
    public void InTemp()
    {
        Can_1 = "7B0 05 62 26 13 00 5C AA AA\n";
        CanMessage can_message = CanMessageComposer.Compose(Can_1);
        var result = Handler.Handle(can_message);
    }


}
